{
  "_args": [
    [
      {
        "raw": "express-promise-router",
        "scope": null,
        "escapedName": "express-promise-router",
        "name": "express-promise-router",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\Agile-Development\\KuraKani-main"
    ]
  ],
  "_from": "express-promise-router",
  "_hasShrinkwrap": false,
  "_id": "express-promise-router@4.0.1",
  "_location": "/express-promise-router",
  "_nodeVersion": "13.14.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/express-promise-router_4.0.1_1592569361289_0.5570124552731526"
  },
  "_npmUser": {
    "name": "mormahr",
    "email": "contact@mahringer.dev"
  },
  "_npmVersion": "6.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "express-promise-router",
    "scope": null,
    "escapedName": "express-promise-router",
    "name": "express-promise-router",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-promise-router/-/express-promise-router-4.0.1.tgz",
  "_shasum": "7ed65473a12208ec1065c1358c398175b89d425c",
  "_shrinkwrap": null,
  "_spec": "express-promise-router",
  "_where": "E:\\Agile-Development\\KuraKani-main",
  "author": {
    "name": "Moritz Mahringer",
    "email": "contact@mahringer.dev"
  },
  "bugs": {
    "url": "https://github.com/express-promise-router/express-promise-router/issues"
  },
  "contributors": [
    {
      "name": "Alex Whitney",
      "email": "alex.whitney@gatech.edu"
    }
  ],
  "dependencies": {
    "is-promise": "^4.0.0",
    "lodash.flattendeep": "^4.0.0",
    "methods": "^1.0.0"
  },
  "description": "A lightweight wrapper for Express 4's Router that allows middleware to return promises",
  "devDependencies": {
    "@babel/core": "7.10.2",
    "@babel/plugin-transform-modules-commonjs": "7.10.1",
    "@changesets/cli": "2.9.1",
    "@mormahr/typescript-definition-tester": "1.1.0",
    "@types/express": "4.17.6",
    "chai": "4.2.0",
    "eslint": "7.2.0",
    "eslint-config-prettier": "6.11.0",
    "express": "4.17.1",
    "husky": "4.2.5",
    "lint-staged": "10.2.11",
    "mocha": "8.0.1",
    "prettier": "2.0.5",
    "request": "2.88.2",
    "request-promise": "4.2.5",
    "sinon": "9.0.2",
    "typescript": "3.9.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-kqan6QuMV7FdfN9b2uYpaKEJnxzfj57voI4IsMjgug5mBc6/hjuvoUT76Z/pvRqID2isl/NygTUe8S2MH2trMg==",
    "shasum": "7ed65473a12208ec1065c1358c398175b89d425c",
    "tarball": "https://registry.npmjs.org/express-promise-router/-/express-promise-router-4.0.1.tgz",
    "fileCount": 24,
    "unpackedSize": 38653,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe7K4RCRA9TVsSAnZWagAAST0QAIGtPcpdixgmuEWsITE2\nmClKKZ8sFKaGRpMtLRPmoNssQ+esEuAu6d8aGjWanoKJQpxMLkd/FE0A2jGu\nTk98djuYNvzFGhbN1fO/7ETy7WzVgTdb75J2p0b7/xa63kCx5v5BFLve/HA+\nQpcAN6QnZWPV1xMwUwhyXu4hV6RxS05YG+Al1kcoV0zIOEbfxPvUKChGEKDg\nZ7NP+ysMiPVGqxFV8LzWQJi9svwFnm/2EXplf3iYUKarCeb6K21+XyfWdm67\npFmLVo7gnTUMsgjpU5FWuG36Z8kH0Ftca/jEtutRcUWPuzXI9fkvFlJ4SywZ\nS2b+fneZNzyl1rnhKvO5tH5wfIqtf60QL6oP8rP06vI0V6YS534o2hUSmy0d\nMIeEfAVHG1khPXOBAgTLSP4yd906tRK8ZqiXpsIglIUodq+WS0N7yd9iztG5\nf/kDHS/J7gdwJ7q7fWO0QUvzLH+n5MRKg4U/1mIcM6ybzzTo1Wo/+9yHxO4g\nL8+syXheP4mDph0trfBhPfZfWKDI1Bb8RsneS86T39Xo3QbZIpiQf/dzt0zC\nhjc93GJxuBzwtkEjyvTZeSCgXDjQxHq9aeCGQ7jpNAJEMujwKVBa9ugSEslA\nYyDYdKqZgH0FODVbPprQLmeQTgPnG9SHlP54IgM0rlIP7Xux/EQ9lKE47pSi\nXY84\r\n=lqpu\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=10"
  },
  "gitHead": "d57c19e88ecd9bcd34b15ef720d2f2fa23f00de1",
  "homepage": "https://github.com/express-promise-router/express-promise-router",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "express",
    "promise",
    "router"
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "lint-staged": {
    "*.js": "eslint --cache --fix",
    "*.{js,ts,yml,yaml,json,json5,css,md,.eslintrc}": "prettier --write"
  },
  "main": "lib/express-promise-router.js",
  "maintainers": [
    {
      "name": "alex-whitney",
      "email": "alex.whitney@gatech.edu"
    },
    {
      "name": "mormahr",
      "email": "me@moritzmahringer.de"
    }
  ],
  "name": "express-promise-router",
  "optionalDependencies": {},
  "peerDependencies": {
    "express": "^4.0.0",
    "@types/express": "^4.0.0"
  },
  "peerDependenciesMeta": {
    "@types/express": {
      "optional": true
    }
  },
  "publishConfig": {
    "access": "public"
  },
  "readme": "# express-promise-router\n\n[![npm version](https://badge.fury.io/js/express-promise-router.svg)](https://badge.fury.io/js/express-promise-router)\n\nA simple wrapper for Express 4's Router that allows middleware to return promises.\nThis package makes it simpler to write route handlers for Express when dealing\nwith promises by reducing duplicate code.\n\n## Getting Started\n\nInstall the module with npm\n\n```bash\nnpm install express-promise-router --save\n```\n\nor yarn.\n\n```bash\nyarn add express-promise-router\n```\n\n`express-promise-router` is a drop-in replacement for Express 4's `Router`.\n\n## Documentation\n\nMiddleware and route handlers can simply return a promise.\nIf the promise is rejected, `express-promise-router` will call `next` with the\nreason. This functionality removes the need to explicitly define a rejection\nhandler.\n\n```javascript\n// With Express 4's router\nvar router = require(\"express\").Router();\n\nrouter.use(\"/url\", function (req, res, next) {\n  Promise.reject().catch(next);\n});\n\n// With express-promise-router\nvar router = require(\"express-promise-router\")();\n\nrouter.use(\"/url\", function (req, res) {\n  return Promise.reject();\n});\n```\n\nCalling `next()` and `next(\"route\")` is supported by resolving a promise with either `\"next\"` or `\"route\"`. No action is taken if the promise is resolved with any other value.\n\n```javascript\nrouter.use(\"/url\", function (req, res) {\n  // equivalent to calling next()\n  return Promise.resolve(\"next\");\n});\n\nrouter.use(\"/url\", function (req, res) {\n  // equivalent to calling next('route')\n  return Promise.resolve(\"route\");\n});\n```\n\nThis package still allows calling `next` directly.\n\n```javascript\nrouter = require(\"express-promise-router\")();\n\n// still works as expected\nrouter.use(\"/url\", function (req, res, next) {\n  next();\n});\n```\n\n### ES6 Imports\n\n`express-promise-router` can be imported via ES6 imports. The `Router`\nconstructor is the default export.\n\n```javascript\nimport Router from \"express-promise-router\";\nconst router = Router();\n```\n\n### Async / Await\n\nUsing `async` / `await` can dramatically improve code readability.\n\n```javascript\nrouter.get('/url', async (req, res) {\n    const user = await User.fetch(req.user.id);\n\n    if (user.permission !== \"ADMIN\") {\n      throw new Error(\"You must be an admin to view this page.\");\n    }\n\n    res.send(`Hi ${user.name}!`);\n})\n```\n\n### Error handling\n\nJust like with regular `express.Router` you can define custom error handlers.\n\n```javascript\nrouter.use((err, req, res, next) => {\n  res.status(403).send(err.message);\n});\n```\n\n### Frequently Asked Questions\n\n#### `Cannot read property '0' of undefined`\n\nThis error may indicate that you call a method that needs a path, without one.\nCalling `router.get` (or `post`, `all` or any other verb) without a path is not\nvalid. You should always specify a path like this:\n\n```javascript\n// DO:\nrouter.get(\"/\", function (req, res) {\n  res.send(\"Test\");\n});\n\n// DON'T:\nrouter.get(function (req, res) {\n  res.send(\"Test\");\n});\n```\n\nFor more information take a look at [this comment](https://github.com/express-promise-router/express-promise-router/issues/46#issuecomment-342002277).\n\n#### Can i use this on `app`?\n\nWe currently don't support promisifying the `app` object. To use promises with\nthe top-level router we recommend mounting a `Router` on the app object, like\nthis:\n\n```javascript\nimport express from \"express\";\nimport Router from \"express-promise-router\";\n\nconst app = express();\nconst router = Router();\napp.use(router);\n\nrouter.get(\"/\", function (req, res) {\n  res.send(\"Test\");\n});\n```\n\n#### Why aren't promise values sent to the client\n\nWe don't send values at the end of the promise chain to the client, because this\ncould easily lead to the unintended leak of secrets or internal state. If you\nintend to send the result of your chain as JSON, please add an explicit\n`.then(data => res.send(data))` to the end of your chain or send it in the last\npromise handler.\n\n## Contributing\n\nAdd unit tests for any new or changed functionality.\nLint and test your code using `npm test`.\n\nUnit tests use [mocha](https://mochajs.org) and\n[chai](http://chaijs.com).\n\nWe use [eslint](http://eslint.org), but styling is\ncontrolled mostly by\n[prettier](https://github.com/prettier/prettier/blob/master/README.md)\nwhich reformats your code before you commit. You can manually trigger a\nreformat using `npm run-script format`.\n\n## Release History\n\n### Unreleased\n\nSee [CHANGELOG](https://github.com/express-promise-router/express-promise-router/blob/trunk/CHANGELOG.md)\n\n## Attribution\n\nLicensed under the [MIT license](LICENSE).\n\nInitial implementation by [Alex Whitney](https://github.com/alex-whitney) \\\nMaintained by [Moritz Mahringer](https://github.com/mormahr) \\\nContributed to by [awesome people](https://github.com/express-promise-router/express-promise-router/graphs/contributors)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/express-promise-router/express-promise-router.git"
  },
  "scripts": {
    "lint": "eslint {lib,test}/**/*.js",
    "test": "npm run-script lint && npm run-script unit-tests",
    "unit-tests": "mocha test/*.test.js"
  },
  "types": "index.d.ts",
  "version": "4.0.1"
}
