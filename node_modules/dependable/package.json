{
  "_args": [
    [
      {
        "raw": "dependable",
        "scope": null,
        "escapedName": "dependable",
        "name": "dependable",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\Agile-Development\\ChatApp"
    ]
  ],
  "_from": "dependable@latest",
  "_id": "dependable@1.1.0",
  "_inCache": true,
  "_location": "/dependable",
  "_nodeVersion": "0.10.48",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/dependable-1.1.0.tgz_1503115393719_0.27496258611790836"
  },
  "_npmUser": {
    "name": "schoonology",
    "email": "michael.r.schoonmaker@gmail.com"
  },
  "_npmVersion": "2.15.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dependable",
    "scope": null,
    "escapedName": "dependable",
    "name": "dependable",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/dependable/-/dependable-1.1.0.tgz",
  "_shasum": "16a222de6871ca0c9561f7e70c04f9b3caff2b8a",
  "_shrinkwrap": null,
  "_spec": "dependable",
  "_where": "E:\\Agile-Development\\ChatApp",
  "author": {
    "name": "Michael Schoonmaker"
  },
  "bugs": {
    "url": "https://github.com/Schoonology/dependable/issues"
  },
  "contributors": [
    {
      "name": "Michael Schoonmaker",
      "email": "michael.r.schoonmaker@gmail.com",
      "url": "http://www.schoonology.com"
    }
  ],
  "dependencies": {},
  "description": "A minimalist dependency injection framework for node.js.",
  "devDependencies": {
    "coffee-script": "~1.3.3",
    "mocha": "1.3.0"
  },
  "directories": {},
  "dist": {
    "shasum": "16a222de6871ca0c9561f7e70c04f9b3caff2b8a",
    "tarball": "https://registry.npmjs.org/dependable/-/dependable-1.1.0.tgz"
  },
  "gitHead": "1638c80ed9e3231f12748c77c3c8513e1c165ebf",
  "homepage": "https://github.com/Schoonology/dependable#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "schoonology",
      "email": "michael.r.schoonmaker@gmail.com"
    }
  ],
  "name": "dependable",
  "optionalDependencies": {},
  "readme": "# Dependable [![Build Status](https://travis-ci.org/idottv/dependable.png)](https://travis-ci.org/idottv/dependable)\n\nA minimalist dependency injection framework for node.js.\n\n## Example\n\n### Create a container\n\nCreate a new container by calling `dependable.container`:\n\n```js\nvar dependable = require('dependable'),\n    container = dependable.container();\n```\n\n### Register some dependencies\n\nRegister a few dependencies for later use (a string and an object):\n\n```js\ncontainer.register('occupation', 'tax attorney');\ncontainer.register('transport', {\n  type: 'station wagon',\n  material: 'wood-paneled'\n});\n```\n\n### Register a dependency that has other dependencies\n\nWhen the argument is a function, the function's arguments are automatically\npopulated with the correct dependencies, and the return value of the function\nis registered as the dependency:\n\n```js\ncontainer.register('song', function (occupation, transport, legalStatus) {\n  var song = {};\n\n  song.chorus = function chorus() {\n    return [\n      'I\\'m a ' + occupation,\n      'On a ' + transport.material + ' ' + transport.type + ' I ride',\n      'And I\\'m ' + legalStatus.message\n    ].join('\\n');\n  };\n\n  return song;\n});\n```\n\n### Register a dependency out-of-order\n\n`song` depends on a `legalStatus`, which hasn't been registered yet.\nDependable resolves dependencies lazily, so we can define this dependency\nafter-the-fact:\n\n```js\ncontainer.register('legalStatus', {\n  warrants: [],\n  message: 'without outstanding warrants'\n});\n```\n\n### Resolve a dependency and use it\n\nLike with container.register, the function arguments are automatically resolved, along\nwith their dependencies:\n\n```js\ncontainer.resolve(function (song) {\n  /*\n   * I'm a tax attorney\n   * On a wood-paneled station wagon I ride\n   * And I'm without outstanding warrants\n   */\n  console.log(song.chorus());\n});\n```\n\n### Re-register dependencies\n\nAs it stands, `song` returns boring, non-catchy lyrics. One way to change its behavior\nis to re-register its dependencies:\n\n```js\ncontainer.register('occupation', 'cowboy');\ncontainer.register('legalStatus', {\n  warrants: [\n    {\n      for: 'shooting the sheriff',\n      notes: 'did not shoot the deputy'\n    }\n  ],\n  message: 'wanted: dead or alive'\n});\n```\n\nThis is really useful in a number of situations:\n\n1. A container can register configuration parameters for an application---for example, a port---and allows them to be changed later\n2. Dependencies can be replaced with mock objects in order to test other dependencies\n\nTo resolve the updated dependencies, provide an empty override:\n\n```js\ncontainer.resolve({}, function (song) {\n  /*\n   * I'm a cowboy\n   * On a wood-paneled station wagon I ride\n   * And I'm wanted: dead or alive\n   */\n  console.log(song.chorus());\n});\n```\n\n### Override dependencies at resolve time\n\nIt's also possible to override dependencies at resolve time:\n\n```js\nvar horse = {\n  type: 'horse',\n  material: 'steel'\n};\n\ncontainer.resolve({ transport: horse }, function (song) {\n  /*\n   * I'm a cowboy\n   * On a steel horse I ride\n   * And I'm wanted: dead or alive\n   */\n  console.log(song.chorus());\n});\n```\n\nSounds like a hit!\n\n## API\n\n`container.register(name, function)` - Registers a dependency by name. `function` can be a function that takes dependencies and returns anything, or an object itself with no dependencies.\n\n`container.register(hash)` - Registers a hash of names and dependencies. This is useful for setting configuration constants.\n\n`container.load(fileOrFolder)` - Registers a file, using its file name as the name, or all files in a folder. Does not traverse subdirectories.\n\n`container.get(name, overrides = {})` - Returns a dependency by name, with all dependencies injected. If you specify overrides, the dependency will be given those overrides instead of those registered.\n\n`container.getSandboxed(name, overrides = {})` - Returns a dependency by name, with all dependencies injected. Unlike `get`, you _must_ specify overrides for all dependencies. This can (and should) be used during testing to ensure a module under test has been competely isolated.\n\n`container.resolve(overrides={}, cb)` - Calls `cb` like a dependency function, injecting any dependencies found in the signature. Like `container.get`, this supports overrides.\n\n`container.list()` - Return a list of registered dependencies.\n\n## Development\n\nDependable is written in coffeescript. To generate javascript, run `npm run prepublish`.\n\nTests are written with mocha. To run the tests, run `npm test`.\n\n## License\n\n[MIT][license]\n\n[license]: https://github.com/Schoonology/dependable/blob/master/LICENSE\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+ssh://git@github.com/Schoonology/dependable.git"
  },
  "scripts": {
    "prepublish": "coffee -c index.coffee",
    "test": "mocha -R spec --compilers coffee:coffee-script test/*"
  },
  "version": "1.1.0"
}
